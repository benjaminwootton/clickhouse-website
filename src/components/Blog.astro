---
// Imports
import { Picture } from 'astro:assets';

// Type definition for image modules
type ImageModule = {
    default: ImageMetadata;
};

// Import dynamically
const postsImport = await import.meta.glob('../pages/insights/*.mdx', { eager: true });
const postImages = await import.meta.glob<ImageModule>('../assets/insights/*.{jpg,jpeg,png,webp}', { eager: true });
let filteredPosts = [];

// Sort posts by date (most recent first)
let posts = Object.values(postsImport).sort((a: any, b: any) => {
    const dateA = new Date(a.frontmatter.date_published);
    const dateB = new Date(b.frontmatter.date_published);
    return dateB.getTime() - dateA.getTime();
});

const { showTags, maxAmountOfPosts, activeTag } = Astro.props;

interface Props {
    showTags?: boolean,
    maxAmountOfPosts?: number,
    activeTag?: string,
}

// Filter posts by activeTag if it is provided
if (activeTag) {
    filteredPosts = posts.filter((post: any) => post.frontmatter.tag === activeTag);
} else {
    filteredPosts = posts;
}

const currentPage = Number(Astro.url.searchParams.get('page') || 1);
const postsPerPage = 12;
const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

// Tags
let tags: { url: string; name: string; amount: number }[] = [];
posts.forEach((post: any) => {
    if (post.frontmatter.tag) {
        const tagName = post.frontmatter.tag;
        const tagIndex = tags.findIndex(tag => tag.name === tagName);

        if (tagIndex !== -1) {
            // If tag exists, increment its amount
            tags[tagIndex].amount += 1;
        } else {
            // If tag doesn't exist, add new tag
            tags.push({
                url: tagName.toLowerCase().replaceAll(' ', '-'),
                name: tagName,
                amount: 1,
            });
        }
    }
});


const tagStyle = `px-4 py-2 no-underline rounded-3xl items-center hover:bg-white transition-colors flex gap-2`
const numberStyle = `text-[10px] bg-black text-white rounded-full
    w-[16px] max-w-[16px] h-[16px] flex justify-center items-center`
const activeStyle = `bg-white`
---

<section 
    class=""
    id="blog"
    data-total-pages={Math.ceil(filteredPosts.length / postsPerPage)}
    data-posts-per-page={postsPerPage}
>
    <div class="wrapper">
        <div class="max-w-[45rem] mb-8 empty:hidden">
            <slot />
        </div>

        {showTags && 
            <div class="flex whitespace-nowrap overflow-auto gap-2 mb-8 bg-light-blue px-4 py-2 rounded-3xl mx-auto max-w-max">
                <a
                    class={` ${tagStyle} ${!activeTag ? activeStyle : ''}`}
                    href="/insights/"
                >
                    All News <span class={numberStyle}>{posts.length}</span>
                </a>
                {tags?.map((loop: any) => (
                    <a
                        class={` ${tagStyle} ${activeTag === loop.name ? activeStyle : ''}`}
                        href={`/insights/categories/${loop.url}/`}
                    >
                        {loop.name} <span class={numberStyle}>{loop.amount}</span>
                    </a>
                ))}
            </div>
        }

        <ul id="posts-container" class="m-0 list-none grid lg:grid-cols-3 md:grid-cols-2 grid-cols-1 gap-8">
            {filteredPosts?.map((loop: any, i: number) => {
                // Find the corresponding image using the image path from frontmatter
                const imagePath = `../assets/insights/${loop.frontmatter.featured_image}`;
                const imageModule = postImages[imagePath];

                  // Convert the date string to a Date object
                const dateString = loop.frontmatter.date_published;
                const dateObject = new Date(dateString);
                const formattedDate = dateObject.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                return (
                    (!maxAmountOfPosts || maxAmountOfPosts > i) &&
                    <li 
                        class="relative group hover-underline-effect-parent"
                        data-post-index={i}
                    >
                        <div class="overflow-hidden">
                            {imageModule && (
                                <Picture
                                    src={imageModule.default}
                                    alt={loop.frontmatter.coverAlt || ''}
                                    loading="lazy"
                                    class="aspect-[400/220] group-hover:scale-105 transition-transform duration-300"
                                />
                            )}
                        </div>

                        <div class="flex justify-between gap-2 items-center mt-1 text-sm">
                            {loop.frontmatter.authorName1 && 
                                <p>{loop.frontmatter.authorName1}</p>
                            }
                            <p class="text-[#808080]">{formattedDate}</p>
                        </div>

                        <a 
                            href={`${loop.url}/`}
                            class="text-[1.35rem] no-underline after:absolute mt-1 block after:top-0 after:left-0 after:w-full after:h-full"
                        >
                            {loop.frontmatter.title}
                        </a>

                        {loop.frontmatter.description && 
                            <p class="text-[#555] text-[0.9375rem]">
                                {loop.frontmatter.description?.length > 190 ? 
                                    loop.frontmatter.description.slice(0, 190) + '...'
                                    :
                                    loop.frontmatter.description
                                }
                            </p>
                        }

                        <p class="flex gap-2 items-center text-sm hover-underline-effect-child hover-underline-effect-black">
                            Read More 
                            <img
                                src="/images/icons/up-arrow.svg"
                                width="16"
                                height="17"
                                loading="lazy"
                                alt=""
                            />
                        </p>
                    </li>
                );
            })}
        </ul>

        {!maxAmountOfPosts &&
            <div id="pagination" class="flex justify-center items-center gap-2 mt-8">
                {totalPages > 1 &&
                    <a 
                        href={`/insights/?page=${currentPage - 1}`} 
                        class="max-w-[48px] min-w-[48px] h-[48px] border rounded-full
                            flex justify-center items-center no-underline mr-2 hover:bg-gray-100
                            pointer-events-none opacity-50
                        "
                    >
                        <img
                            src="/images/icons/arrow-right.svg"
                            width="16"
                            height="16"
                            loading="lazy"
                            class="rotate-180"
                            alt="Previous page"
                        />
                    </a>
                }
                
                {totalPages > 1 && [...Array(totalPages).keys()]?.map((_, i) => (
                    <a 
                        href={`/insights/?page=${i + 1}`}
                        data-number={i + 1}
                        class={`
                            max-w-[48px] min-w-[48px] h-[48px] border rounded-full hover:bg-gray-100
                            flex justify-center items-center no-underline
                            ${i === 0 ? 'border-black' : ''}
                        `}
                    >
                        {i + 1}
                    </a>
                ))}
                
                {currentPage < totalPages && (
                    <a 
                        href={`/insights/?page=${currentPage + 1}`} 
                        class="max-w-[48px] min-w-[48px] h-[48px] border rounded-full
                            flex justify-center items-center no-underline ml-2 hover:bg-gray-100
                        "
                    >
                        <img
                            src="/images/icons/arrow-right.svg"
                            width="16"
                            height="16"
                            loading="lazy"
                            alt="Next page"
                        />
                    </a>
                )}
            </div>
        }
    </div>
</section>

{!maxAmountOfPosts &&
    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const section = document.getElementById('blog');
            const postsContainer = document.getElementById('posts-container');
            const allPosts = postsContainer.querySelectorAll('li');
            const paginationLinks = document.querySelectorAll('#pagination a[data-number]');
            const prevPageLink = document.querySelector('#pagination a[href*="page="]');
            const nextPageLink = document.querySelector('#pagination a[href*="page="] img[alt="Next page"]').closest('a');

            // Get current page from URL
            const urlParams = new URLSearchParams(window.location.search);
            const currentPage = Number(urlParams.get('page') || 1);

            const totalPages = Number(section.dataset.totalPages);
            const postsPerPage = Number(section.dataset.postsPerPage);

            // Set correct href for previous page link
            if (currentPage === 1) {
                prevPageLink.classList.add('pointer-events-none', 'opacity-50');
                prevPageLink.removeAttribute('href');
            } else {
                prevPageLink.href = `/insights/?page=${currentPage - 1}`;
                prevPageLink.classList.remove('pointer-events-none', 'opacity-50');
            }

            // Set correct href for next page link
            if (currentPage === totalPages) {
                nextPageLink.classList.add('pointer-events-none', 'opacity-50');
                nextPageLink.removeAttribute('href');
            } else {
                nextPageLink.href = `/insights/?page=${currentPage + 1}`;
            }

            // Highlight current page number
            paginationLinks.forEach(link => {
                if (Number(link.getAttribute('data-number')) === currentPage) {
                    link.classList.add('border-black');
                } else {
                    link.classList.remove('border-black');
                }
            });

            // Initially hide all posts
            allPosts.forEach(post => {
                post.style.display = 'none';
            });

            // Show posts for the current page
            const startIndex = (currentPage - 1) * postsPerPage;
            const endIndex = startIndex + postsPerPage;

            allPosts.forEach((post, index) => {
                if (index >= startIndex && index < endIndex) {
                    post.style.display = 'block';
                }
            });
        });
    </script>
}